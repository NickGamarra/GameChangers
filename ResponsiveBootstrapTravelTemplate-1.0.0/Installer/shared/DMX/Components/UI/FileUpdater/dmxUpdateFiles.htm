<!-- MENU-LOCATION=NONE -->
<!-- fileVersion = "1.0.3"; -->
<html>
<head>
<title>DMXzone Update Files</title>
<!--

Usage examle:

  dw.runCommand('dmxUpdateFiles', src1, dst1, ignored, silent, result);

  or

  dw.runCommand('dmxUpdateFiles', {
    src: src1,
    dst: dst1,
    ignore: ignored
  }, silent, result);

  or

  // multiple sessions in single progress
  dw.runCommand('dmxUpdateFiles', [
    {src: src1, dst: src2, ignore: ignored1},
    {src: src2, dst: src2, ignore: ignored2},
    {src: src3, dst: src3                  },
    ...
  ], silent, result);

  "ignore"
  The third argument (or the "ignore" property) is optional and can be a string
  for file or folder name, or array of strings for multiple names.

  "silent"
  The silent argument is optional boolean (defaults to false) to set if a
  messages will be shown for the result.
  If "silent" is true (the default) and if files were copied successfuly,
  the will try to synchronize files in site. If the site is defined corectly,
  and has a remote folder, the synchronize dialog should apear. If something
  goes wrong, there is an alert() based message to display the list of the
  changed folders.

  The result argument is (optional) Object. If used, it will receive the detailed
  information about the result. The following properties will be set to it:
  - "errors"     - Array of string error messages (if any)
  - "newFolders" - Array of newly created or updated folder paths (if any).
  - "newFiles"   - Array of newly created or updated files paths (if any).

  Also the global MM.dmxUpdateHeadFilesValue will be set to:
 -1 -> if there was an error
  0 -> if no changes were made (everything was up to date)
  1 -> if something was added/updated

Version 1.0.3: 30-03-2011
   * allow dst paths to be site root absolute paths

-->
<script type="text/javascript">
<!--
var ARG = [];
var SILENT = false;
var DELEGATE;

function canAcceptCommand()
{
  var dom = dw.getDocumentDOM();

  // skip extension files :-)
  if (!dom || (dom && dom.URL.indexOf(dw.getConfigurationPath()) === 0))
  {
    return false;
  }
  return true;
}

function isDOMRequired()
{
  return true;
}

function receiveArguments()
{
  // reset those
  ARG      = [];
  SILENT   = false;
  DELEGATE = null;

  if (arguments.length > 0)
  {
    var silentIndex   = 3;
    var delegateIndex = 4;

    // function.arguments is readonly!
    var _arg = arguments[0];

    // case object
    if(isObject(_arg) && !isArray(_arg))
    {
      _arg = [_arg];
    }

    // case array
    if (isArray(_arg))
    {
      for (var i = 0; i < _arg.length; i++)
      {
        if (isObject(_arg[i]))
        {
          if (typeof _arg[i].src == "string" && typeof _arg[i].dst == "string")
          {
            var session = {};
            session.src = _arg[i].src;
            session.dst = _arg[i].dst;
            if (_arg[i].ignore)
            {
              session.ignore = _arg[i].ignore;
            }
            ARG.push(session);
          }
        }
      }
      silentIndex = 1;
      delegateIndex = 2;
    }

    // case std. arguments list
    else
    {
      if (arguments.length > 0)
      {
        var session = {};
        session.src = String(arguments[0]);
        session.dst = String(arguments[1]);
        if (arguments[2])
        {
          session.ignore = isArray(arguments[2])
          ? arguments[2]
          : arguments[2]
            ? [String(arguments[2])]
            : [];
        }
        ARG.push(session);
      }
    }

    if (arguments[silentIndex])
    {
      SILENT = !!arguments[silentIndex];
    }

    if (isObject(arguments[delegateIndex]))
    {
      DELEGATE = arguments[delegateIndex];
    }
  }
}

function init()
{
  var result = 0; // nothing changed

  if (ARG.length > 0)
  {
    var x = synchronize();

    if (x.errors.length > 0) {
      result = -1; // error
      if (!SILENT)
      {
        alert(
          'Errors while trying to synchronize files:\n\n\n\t' +
          x.errors.join('\n\n\t')
        );
      }
    }
    else
    {
      if (x.newFolders.length > 0) {
        result = 1; // updated
        if (!SILENT)
        {
          if (!dw_synchronize(x.newFiles))
          {
            notifyChanged(x);
          }
        }
      }
    }

    if (DELEGATE)
    {
      DELEGATE.errors     = x.errors     || [];
      DELEGATE.newFolders = x.newFolders || [];
      DELEGATE.newFiles   = x.newFiles   || [];
    }
  }

  MM.dmxUpdateHeadFilesValue = result;
}

function notifyChanged(x)
{
  if (DWfile.exists(dw.getConfigurationPath() + '/Commands/dmxUpdateFilesDialog.htm')) {
    dw.runCommand('dmxUpdateFilesDialog', x);
    return;
  }

  var f = [], i, r = getDocumentSiteRoot().replace(/\/?$/, ""), l = r.length;
  for (i = 0; i < x.newFolders.length; i++)
  {
    // replace siteRoot with "/"
    f.push(
      x.newFolders[i].indexOf(r) === 0
      ? x.newFolders[i].substr(l)
      : x.newFolders[i]
    );
  }

  // sort
  f.sort();

  alert(
    'The following folders were changed or added to your site.\n' +
    'Please consider uploading them to your live server as well:\n\n\t' +
    f.join('\n\t')
  );
}

// Returns true if  a syncDialog was triggered (it's not modal)
// NOTE: also returns true if the site is not corectly defined, so there is
//       no need to synhronize
// returns false on failure
function dw_synchronize(files)
{

  // invalid usage - no files
  if (files.length === 0)
  {
    return false;
  }

  // currently displayed site
  var cur_site = site.getCurrentSite();

  // the site for the currently proccessed document
  var doc_site = getDocumentSite();

  // if the site panel is visible
  //var sitePannelWasVisible = dw.getFloaterVisibility('site files');



  /** -- Now show the desired site, so we can analyze it ------------------- **/

  // Switch to the correct site if needed
  site.setCurrentSite(doc_site);

  // remove any site selection
  site.setSelection([]);

  // nothing to update
  if (!hasRemoteFolder())
  {
    return false;
  }

  // this will make split view from remote
  site.refresh('local');


  // site.canSynchronize() - indicates a properly defined site (and MM_notes)
  if (site.canSynchronize() || site.canPut("site"))
  {
    var returnValue = false;

    // just in case...
    try {

      // we need the local pane of the site panel
      site.setFocus('local');

      // and to be selected
      site.setSelection(files);

      if (site.canSynchronize())
      {
        site.synchronize(
          "selection", // what          - "site" or "selection"
          "both",      // direction     - "put", "get", or "both"
          false ,      // deleteFiles   - true or false
          true         // verifyChanges - true or false
        );

        returnValue = true;
      }

    } catch (ex) {
      alert(ex);
    }

    return returnValue;
  }

  return false;
}

function hasRemoteFolder()
{
  var remote = site.getAppServerPathToFiles();
  var local  = site.getLocalPathToFiles();
  remote = remote.replace(/\|/, "").replace(/\\/g, "/").replace(/\/?$/, "");
  local  = local.replace(/\|/, "").replace(/\\/g, "/").replace(/\/?$/, "");
  return local != remote;
}

function getDocumentSiteRoot()
{
	var result  = dw.getSiteRoot();
  var docSite = getDocumentSite();
  if (docSite)
  {
    var siteRoot = site.getLocalRootURL(docSite);
    if (siteRoot)
    {
      result = siteRoot;
    }
  }
  return result;
}

function getDocumentSite()
{
	var result = null;
  var dom = dw.getDocumentDOM();
  if (dom)
  {
  	var docSite = site.getSiteForURL(dom.URL);
    if (docSite)
    {
    	result = docSite;
    }
  }
  return result;
}

function synchronize()
{
	var folders = {};
  var files   = {};
  var changed = [];
	var queue   = [];
  var result  =
  {
    errors     : [],
    newFolders : [],
    newFiles   : []
  };

	function buildQueue(curSrc, curDst, ignored) {

    // convert IGNORE from Array to Map Object (easy to check)

    if (typeof ignored == "string")
    {
      var tmp = {};
      tmp[ignored] = 1;
      ignored = tmp;
    }
    else if (isArray(ignored))
    {
      var tmp = {};
      for (var i = 0; i < ignored.length; i++)
      {
        tmp[ignored[i]] = 1;
      }
      ignored = tmp;
    }

    if (curDst.charAt(0) == '/') curDst = getDocumentSiteRoot().replace(/\/?$/, "") + curDst;

    //alert(
    //  curSrc + "\n," +
    //  curDst + "\n," +
    //  ignored.toSource() + "\n"
    //)

    // skip ignored item
		if (ignored[curSrc] || ignored[basename(curSrc)]) {
      return;
    }

		// files -------------------------------------------------------------------
		if (isFile(curSrc)) {
			var toCopy = true;
			if (isFile(curDst)) {
				var srcDate = DWfile.getModificationDateObj(curSrc);
				var dstDate = DWfile.getModificationDateObj(curDst);
				if (srcDate <= dstDate) {
					toCopy = false;
				}
			}
			if (toCopy) {
				queue.push({
					msg: 'Copying file: ' + basename(curSrc),
					worker: function() {
						try {
							if (!mkdir(dirname(curDst))) {
								result.errors.push('Cannot create folder ' + curDst);
							} else {
								DWfile.copy(curSrc, curDst);
	              folders[dirname(curDst)] = 1;
                files[curDst] = 1;
	            }
						} catch (ex) {
							result.errors.push(
                'Cannot copy ' + curSrc + '\nto ' + curDst + ':\n\n' + ex
              );
						}
					}
				});
			}
		}


		// folders -----------------------------------------------------------------
		else if (isDir(curSrc)) {
      // Create missing folders
      if (!DWfile.exists(curDst)) {
				queue.push({
					msg: 'Creating folder: ' + basename(curDst),
					worker: function() {
						if (!mkdir(curDst)) {
							result.errors.push('Cannot create folder ' + curDst);
						} else {
              folders[curDst.replace(/\/*$/, "")] = 1;
            }
					}
				});
			}


			// Directory recursion
			var list = DWfile.listFolder(curSrc);
			if (list) {
				for (var i = 0; i < list.length; i++) {
					buildQueue(
						curSrc.replace(/\/?$/, '/') + list[i],
						curDst.replace(/\/?$/, '/') + list[i],
            ignored
					);
				}
			} else {
				result.errors.push(
				  'Cannot copy ' + curSrc + '\nto ' + curDst + '.\nCannot open folder ' + curSrc
				);
			}
		}

		else {
			result.errors.push('Cannot synchronize. Unknown source:\n' + curSrc);
		}

	}

  // concat multiple queues
  for (var i = 0; i < ARG.length; i++)
  {
    buildQueue(ARG[i].src, ARG[i].dst, ARG[i].ignore || []);
  }

  if (result.errors.length > 0)
  {
    return result;
  }

	if (queue.length > 0) {
		dw.runCommand('ProgressIndicator', queue, 'Synchronizing the Site');
    for (var n in folders) {
      result.newFolders.push(n);
    }
    for (n in files) {
      result.newFiles.push(n);
    }
	}

  return result;
}

function basename(path) {
  if (path.indexOf('/') == -1) {
    return path;
  }
  return path.substr(path.lastIndexOf('/') + 1);
}

function dirname(path) {
  if (path.indexOf('/') == -1) {
    return path;
  }
  return path.substring(0, path.lastIndexOf('/'));
}

function isFile(path) {
	if (DWfile.exists(path)) {
    var attr = DWfile.getAttributes(path);
    if (!attr || (attr && (attr.indexOf("D") == -1))) {
      return true;
    }
  }
  return false;
}

function isDir(path) {
  if (DWfile.exists(path)) {
    var attr = DWfile.getAttributes(path);
    if (attr && (attr.indexOf("D") != -1)){
      return true;
    }
  }

  return false;
}

function mkdir(path) {
  path = path.replace(/\/?$/, '');
  if (!DWfile.exists(path)) {
    var base = dirname(path);
    if (!DWfile.exists(base)) {
      mkdir(base);
    }
    if (!DWfile.createFolder(path)) {
      return false;
    }
  }
  return true;
}

function isArray(object) {
  return object !== null && typeof object == "object" &&
    'splice' in object && 'join' in object;
}

function isObject(object) {
  return object !== null && typeof object == "object";
}
//-->
</script>
</head>
<body onLoad="init()">
</body>
</html>
