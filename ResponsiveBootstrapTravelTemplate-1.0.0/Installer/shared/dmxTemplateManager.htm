<!-- MENU-LOCATION=NONE -->
<!-- fileVersion = "1.3.0"; -->
<html>
<head>
<title>DMXzone Template Installer</title>
<script type="text/javascript">
<!--

var METHOD;
var METHOD_ARGUMENTS;

var TEMPLATES_FOLDER = dw.getConfigurationPath() + '/shared/DMXzone/Templates';

var dwVer = parseFloat(dw.appVersion);
var isMac = (dw.appVersion.toLowerCase().indexOf('mac') != -1);

var installedExtensions;

function canAcceptCommand(){
  return true;
}

function isDOMRequired(){return false;}

function receiveArguments(){
    METHOD           = null;
		METHOD_ARGUMENTS = [];
		if (arguments[0] && typeof window[arguments[0]] == 'function') {
        METHOD = window[arguments[0]];
    }
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            METHOD_ARGUMENTS.push(arguments[i]);
        }
    }
}

// Available commands ==============================================================================

function installTemplate(templateFolder, templateName) {

	if (!templateName) templateName = templateFolder;

  //Check if exists
  var theTemplate = TEMPLATES_FOLDER + '/' + templateFolder;
  if (!DWfile.exists(theTemplate)) {
  	alert('Template "' + templateName + '" does not exists!');
  	return;
  }

  //Check for required extensions
  if (!checkForRequiredExtensions(theTemplate)) {
		alert('You are missing required Extensions to make this template work in Dreamweaver. Template can not be installed.\nPlease make sure you have installed to required extensions first.');
		return;
  }

	//Check for site definition
  var siteURL = dw.getSiteRoot();

  if (!siteURL.length) {
    alert('Please define a site first in Dreamweaver!');
    return;
  }

  siteURL = siteURL.replace(/\/?$/, '')

	//Check if site is empty
	var fileList = DWfile.listFolder(siteURL, "files");
	if (fileList.length > 0) {
		if (!confirm('Your site in Dreamweaver is not empty!\n Are you sure you want to insert the Template in it?')) {
			return;
		}
	}

	//Check if index.html exists
	if (DWfile.exists(siteURL + '/index.html')) {
		if (!confirm('Your site in Dreamweaver already has an "index.html"\nIf you proceed it will be overwritten.\n Do you want to proceed?')) {
			return;
		}
	}


	//Do the real copy
	if (confirm('Do you want to install the "' + templateName + '" template in your current site?')) {

		var copyObj = [{src: theTemplate + '/', dst: siteURL + '/', ignore: 'reqExtensions.xml'}]
	  var result = {};
	  dw.runCommand('dmxUpdateFiles', copyObj, false, result);

	  switch (MM.dmxUpdateHeadFilesValue) {
	    case -1: //there was an error
	        alert('An error occured during the file copy!\n' + result.errors);
	        return false;
	      break;
	    case 1:  //something was added/updated
	        //Not needed any more
	        //dw.runCommand('dmxUpdateFilesDialog', result);
	      break;
	    default: // nothing changed
	  }
	}
}

function checkForRequiredExtensions(theTemplate) {
	//get all installed extensions
	getInstalledExtensions();
	//alert(installedExtensions.toSource());

  //Check for required extensions
  var reqExtensions = theTemplate + '/reqExtensions.xml';
  if (DWfile.exists(reqExtensions)) {
  	var reDom = dw.getDocumentDOM(reqExtensions);
  	if (reDom) {
  		var ext = reDom.getElementsByTagName('extension');
  		if (ext && ext.length > 0) {
  			for (var rei=0; rei<ext.length; rei++) {
	  			extName = ext[rei].getAttribute('name')
	  			extNewsId = ext[rei].getAttribute('newsid');
	  			if (!isExtensionInstalled(extNewsId)) {
	          extLink = changeUrlParams('http://www.dmxzone.com/go?'+extNewsId,
	                              [{aName: 'utm_source',  aValue: 'DMXzone+Template+Installer'},
	                               {aName: 'utm_medium',  aValue: 'Required+Extensions'},
	                               {aName: 'utm_campaign', aValue: extName.replace(/ /g,'+')}
	                              ]
	                           );
	          if(confirm('This design template requires the "' + extName + '" Dreamweaver extension from DMXzone.\nWould you like to see more info?')) {
	          	dw.browseDocument(extLink);
	          }
	          return false;
	        }
	      }
  		}
  	}
  }
  return true;
}

function isExtensionInstalled(newsId) {
	for (var ei=0; ei< installedExtensions.length; ei++) {
		var curExt = installedExtensions[ei];
		if (curExt.newsId && parseInt(curExt.newsId) == parseInt(newsId)) {
			return true;
		}
	}
	return false;
}

function getInstalledExtensions() {
  installedExtensions = [];
  var extInfo, extAttr, fileURL, fileContents;
  var extMatchExp = /var\s+extensionName\s*=\s*"([^"]*)"\s*(?:,|;\s*var)\s*newsId\s*=\s*(\d*)\s*(?:,|;\s*var)\s*extensionMXIfileName\s*=\s*"([^"]*)"\s*(?:,|;)/i
  // Search for all files ending with the _install name.
  var commandsPath = dw.getConfigurationPath()+'/Commands/';
  var extensionsPath = dwVer > 12 ? dw.getConfigurationPath()+'/shared/DMXzone/InstalledExtensions/' : getExtensionManagerPath(true); //dw.getConfigurationPath()+'/Extensions/';

  var fileFilter = '?*_install.htm';
  var filesList = DWfile.listFolder(commandsPath+fileFilter, 'files');

  //Check for DMXzone commercial extensions
  for (var fi=0; fi < filesList.length; fi++) {
    fileURL = commandsPath + filesList[fi];
    fileContents = DWfile.read(fileURL);
    if (fileContents){
      extAttr = fileContents.match(extMatchExp);
      //gives error? sometimes?
      //logWrite('CHECK: ' + fileURL + '\n\n' + extAttr.length + '\n\n' + extAttr);
      if (extAttr && extAttr.length > 3) {
        var theMxiFileName = extensionsPath + (dwVer > 12 ? extAttr[3].replace(/\.mxi$/i,'.xml') : extAttr[3])
        if (DWfile.exists(theMxiFileName)) {
          var extension = new Object();
          extension.name = extAttr[1];
          extension.newsId = extAttr[2];
          extension.mxiName = extAttr[3];
          extension.onlineVersion = "";
          extension.link = "http://www.dmxzone.com/go?" + extension.newsId;

          // normalize amps
          extension.link = extension.link.replace(/&amp;/gi,'&');

          //Add Google Analytics links
          extension.link = changeUrlParams(extension.link,
                               [{aName: 'utm_source',  aValue: 'DMXzone+Template+Installer'},
                               {aName: 'utm_medium',  aValue: 'Required+Extensions'},
                               {aName: 'utm_campaign', aValue: extension.name.replace(/ /g,'+')}
                              ]
                           );

          extension.image = "";
          installedExtensions.push(extension);
        }
      }
    }
  }

  return installedExtensions;
}

//Version 2.1 - now works with all Extension Manager locations also CS5+ and CS6+
//Version 2.2 - special case for CS5.5
//            - new flag for getting the db
//Version 2.3 - now using configuration path to determine CS version
function getExtensionManagerPath(mxiFlag,dbFlag)
{
  var dwVer = parseFloat(dw.appVersion);
  //Extension manager 1.7+ uses other location
  if (dw.getUserConfigurationPath)
  {
    var EMconfig = dw.getUserConfigurationPath();
    var begDW = EMconfig.indexOf('Dreamweaver');
    if (begDW > 0)
    {
      var begSL = EMconfig.indexOf('/',begDW);
      var csVer = 'CS' + (dwVer-6);
      if (begSL > 0) {
      	csVer = EMconfig.substring(begDW+12,begSL);
      }

      EMconfig = EMconfig.substring(0,begDW);
      EMconfig += 'Extension Manager';
      if (dwVer == 10) {
        EMconfig += '2';
      } else if (dwVer > 10) {
        EMconfig += ' ' + csVer;
      }

      //Must be 12 (CS6) as CS5.5 returns ver 11.5 and still uses Configuration/Extensions
      if (dwVer < 12) {
      	EMconfig += '/Configuration/Extensions/';
      } else {
      	if (dbFlag) {
      		EMconfig += '/Configuration/DB/';
      	} else {
	      	if (mxiFlag) {
	      		EMconfig += '/Mxi Flag/Dreamweaver ' + csVer + '/';
	      	} else {
	      		EMconfig += '/EM Store/Dreamweaver ' + csVer + '/';
	      	}
	      }
      }
      if (dwVer < 9)
      {
        EMconfig = EMconfig.replace(/\/Macromedia\//,'/Adobe/');
      }
      return EMconfig;
    }
  }
  return null;
}

function changeUrlParams(theUrl, params) {
  var newParams = [];
  var newUrl = theUrl.replace(/&amp;/gi,'&');
  var begQuery = newUrl.indexOf('?');
  if (begQuery != -1) {
    var queryString = newUrl.substring(begQuery+1,newUrl.length);
    var urlOnly = newUrl.substring(0,begQuery);
    var oldParams = queryString.split('&');

    if (oldParams.length > 0 ) {
      for (var pai=0; pai<oldParams.length; pai++) {
        theParam = oldParams[pai].split('=');
        if (theParam && theParam.length > 0) {
          parFound = false;
          for (var ni=0; ni<params.length; ni++) {
            if (theParam[0] == params[ni].aName) {
              newParams.push(params[ni].aName+'='+params[ni].aValue);
              parFound = true;
              params.splice(ni,1);
              break;
            }
          }
          if (!parFound)
            newParams.push(oldParams[pai]);
        }
      }
      // check if all parameters were added
      for (var ni=0; ni<params.length; ni++) {
        newParams.push(params[ni].aName+'='+params[ni].aValue);
      }
    }
    var retUrl = urlOnly;
    if (newParams.length > 0) {
      retUrl += '?' + newParams.join('&');
    }
    return retUrl
  } else {
    // no parameters
    for (var ni=0; ni<params.length; ni++) {
      newParams.push(params[ni].aName+'='+params[ni].aValue);
    }
    var retUrl = theUrl;
    if (newParams.length > 0) {
      retUrl += '?' + newParams.join('&');
    }
    return retUrl

  }
  return theUrl;
}

// =================================================================================================


// Executor ========================================================================================
function executeAction() {
    if (METHOD) {
        METHOD.apply(window, METHOD_ARGUMENTS);
    }
}
// =================================================================================================

function init() {
  executeAction();
}

//-->
</script>
</head>
<body onLoad="init()">
</body>
</html>
